# This is the right place to customize your installation of SpamAssassin.
#
# See 'perldoc Mail::SpamAssassin::Conf' for details of what can be
# tweaked.
#
# Only a small subset of options are listed below
#
###########################################################################

#   Add *****SPAM***** to the Subject header of spam e-mails
#
# rewrite_header Subject *****SPAM*****


#   Save spam messages as a message/rfc822 MIME attachment instead of
#   modifying the original message (0: off, 2: use text/plain instead)
#
# report_safe 1


#   Set which networks or hosts are considered 'trusted' by your mail
#   server (i.e. not spammers)
#
# trusted_networks 212.17.35.


#   Set file-locking method (flock is not safe over NFS, but is faster)
#
# lock_method flock


#   Set the threshold at which a message is considered spam (default: 5.0)
#
# required_score 5.0


#   Use Bayesian classifier (default: 1)
#
use_bayes 1

#
#   Use Bayes Rules
#
use_bayes_rules 1

#   Bayesian classifier auto-learning (default: 1)
#
bayes_auto_learn 1

#
# DCC (disabled, not available via buster)
#
#use_dcc 1
#dcc_path /usr/bin/dccproc
#dcc_add_header 1
#dcc_dccifd_path /usr/sbin/dccifd

#
# Pyzor
#
use_pyzor 1
pyzor_path /usr/bin/pyzor
#pyzor_add_header 1
pyzor_options --homedir /etc/spamassassin

#
# Razor
#
use_razor2 1
razor_config /etc/razor/razor-agent.conf

#
# Adding SPAM header
add_header all Report _REPORT_

#   Set headers which may provide inappropriate cues to the Bayesian
#   classifier
#
# bayes_ignore_header X-Bogosity
# bayes_ignore_header X-Spam-Flag
# bayes_ignore_header X-Spam-Status


#   Whether to decode non- UTF-8 and non-ASCII textual parts and recode
#   them to UTF-8 before the text is given over to rules processing.
#
# normalize_charset 1

#   Some shortcircuiting, if the plugin is enabled
# 
ifplugin Mail::SpamAssassin::Plugin::Shortcircuit
#
#   default: strongly-whitelisted mails are *really* whitelisted now, if the
#   shortcircuiting plugin is active, causing early exit to save CPU load.
#   Uncomment to turn this on
#
# shortcircuit USER_IN_WHITELIST       on
# shortcircuit USER_IN_DEF_WHITELIST   on
# shortcircuit USER_IN_ALL_SPAM_TO     on
# shortcircuit SUBJECT_IN_WHITELIST    on

#   the opposite; blacklisted mails can also save CPU
#
# shortcircuit USER_IN_BLACKLIST       on
# shortcircuit USER_IN_BLACKLIST_TO    on
# shortcircuit SUBJECT_IN_BLACKLIST    on

#   if you have taken the time to correctly specify your "trusted_networks",
#   this is another good way to save CPU
#
# shortcircuit ALL_TRUSTED             on

#   and a well-trained bayes DB can save running rules, too
#
# shortcircuit BAYES_99                spam
# shortcircuit BAYES_00                ham

endif # Mail::SpamAssassin::Plugin::Shortcircuit

ifplugin Mail::SpamAssassin::Plugin::DMARC
  ifplugin Mail::SpamAssassin::Plugin::DKIM
    ifplugin Mail::SpamAssassin::Plugin::SPF
      dmarc_save_reports 0
      dkim_minimum_key_bits 1024

      header DMARC_REJECT eval:check_dmarc_reject()
      priority DMARC_REJECT 500
      describe DMARC_REJECT DMARC fail with reject policy
      score DMARC_REJECT 10

      header DMARC_QUAR eval:check_dmarc_quarantine()
      priority DMARC_QUAR 500
      describe DMARC_QUAR DMARC fail with quarantine policy
      score DMARC_QUAR 6

      header DMARC_NONE eval:check_dmarc_none()
      priority DMARC_NONE 500
      describe DMARC_NONE DMARC fail with none policy
      score DMARC_NONE 0.1

      header DMARC_MISSING eval:check_dmarc_missing()
      priority DMARC_MISSING 500
      describe DMARC_MISSING DMARC policy missing
      score DMARC_MISSING 0.0

      header DMARC_PASS eval:check_dmarc_pass()
      priority DMARC_PASS 500
      describe DMARC_PASS DMARC tests pass
      score DMARC_PASS -0.1
    endif
  endif
endif

